#!/bin/bash
MAX_TASK_COUNT=8;
PWD0=$(pwd);
NEED_SYSROOT_COPY=0;
PREFIX_BASE="${PWD0}/H_generate";

function build_helper () {
    ANDROID_NDK=${NDK}
    NATIVE_API_LEVEL=$1
    case $2 in
    0)
        TOOLCHAIN=${ANDROID_NDK}/toolchains/aarch64-linux-android-4.9/prebuilt/linux-x86_64
        TOOLCHAIN_HOST=aarch64-linux-android
        TARGET_ARCH=arch-arm64
    ;;
    1)
        TOOLCHAIN=${ANDROID_NDK}/toolchains/arm-linux-androideabi-4.9/prebuilt/linux-x86_64
        TOOLCHAIN_HOST=arm-linux-androideabi
        TARGET_ARCH=arch-arm
    ;;
    2)
        TOOLCHAIN=${ANDROID_NDK}/toolchains/mips64el-linux-android-4.9/prebuilt/linux-x86_64
        TOOLCHAIN_HOST=mips64el-linux-android
        TARGET_ARCH=arch-mips64
    ;;
    3)
        TOOLCHAIN=${ANDROID_NDK}/toolchains/mipsel-linux-android-4.9/prebuilt/linux-x86_64
        TOOLCHAIN_HOST=mipsel-linux-android
        TARGET_ARCH=arch-mips
    ;;
    4)
        TOOLCHAIN=${ANDROID_NDK}/toolchains/x86-4.9/prebuilt/linux-x86_64
        TOOLCHAIN_HOST=i686-linux-android
        TARGET_ARCH=arch-x86
    ;;
    5)
        TOOLCHAIN=${ANDROID_NDK}/toolchains/x86_64-4.9/prebuilt/linux-x86_64
        TOOLCHAIN_HOST=x86_64-linux-android
        TARGET_ARCH=arch-x86_64
    ;;
    *)
        return 1
    ;;
    esac 
    SYSROOT_DIR="${ANDROID_NDK}/platforms/android-${NATIVE_API_LEVEL}/${TARGET_ARCH}"
    __CC="${TOOLCHAIN}/bin/${TOOLCHAIN_HOST}-gcc"
    __CXX="${TOOLCHAIN}/bin/${TOOLCHAIN_HOST}-g++"
    __FLAGS="-D__ANDROID_API__=${NATIVE_API_LEVEL} -I${ANDROID_NDK}/sysroot/usr/include/${TOOLCHAIN_HOST}"
    __R_DIR="android-${NATIVE_API_LEVEL}/${TARGET_ARCH}"
    if [ ! -d "${SYSROOT_DIR}" ]; then
        echo "Missing SYSROOT: ${SYSROOT_DIR}"
        return 1
    else
        export SYSROOT_DIR TOOLCHAIN_HOST __FLAGS
    fi
}
function _N_build(){
    for api in {32..14}; do
        for tgt in {0..5}; do
            build_helper $api $tgt
            if [ 0 = $? ];then
                echo "Found SYSROOT: ${SYSROOT_DIR}"
                PREFIX="${PREFIX_BASE}/${__R_DIR}"
                if [ ! -d "${PREFIX}" ]; then
                    mkdir -p ${PREFIX}
                    if [ ! -d "${PREFIX}" ]; then
                        continue
                    fi
                    if [ ${NEED_SYSROOT_COPY} = 1 ]; then
                        cp -R ${SYSROOT_DIR}/* ${PREFIX}
                        if [ ! 0 = $? ];then
                            continue
                        fi
                    fi
                fi
                if [ ${NEED_SYSROOT_COPY} = 1 ]; then
                    SYSROOT_DIR=${PREFIX}
                fi
                BUILDDIR=${PWD0}/H_build/${__R_DIR}
                mkdir -p ${BUILDDIR}
                cd ${BUILDDIR}
                _N_FLAGS="--sysroot ${SYSROOT_DIR}"
                _N_FLAGS="${_N_FLAGS} ${__FLAGS}"
                _N_FLAGS="${_N_FLAGS} -I${SYSROOT_DIR}/usr/include"
                _N_FLAGS="${_N_FLAGS} -L${SYSROOT_DIR}/usr/lib"
                _N_FLAGS="${_N_FLAGS} -L${SYSROOT_DIR}/usr/lib64"
                _N_CC="${__CC} ${_N_FLAGS}"
                _N_CXX="${__CXX} ${_N_FLAGS}"
                PKG_CONFIG_PATH=${SYSROOT_DIR}/usr/lib/pkgconfig \
                    CC=${_N_CC} CXX=${_N_CXX} \
                    ${PWD0}/configure --host=${TOOLCHAIN_HOST} \
                    --prefix=${PREFIX}/usr "$@" && make -j8 && make install &
                cd ${PWD0}
                while [ true ] ; do 
                    task_count=0
                    for running_task in $(jobs -p);do
                        ((task_count++))
                    done
                    if [ $task_count -lt $MAX_TASK_COUNT ] ; then
                        break;
                    fi
                    sleep 5
                done
            fi
        done
    done
    for running_task in $(jobs -p);do
        wait $running_task
    done
}

function _N_main(){
    local -a _N_ARGS=();
    while [ ! 0 = $# ] ; do
        if [ '--sys' = $1 ]; then 
            shift;
            if [ 0 = $# ]; then
                echo "$0: Invalid Arg Counts!" 1>&2;
                exit 1;
            fi
            if [ ! 0 = ${NEED_SYSROOT_COPY} ] ; then
                echo "$0: Invalid Args!" 1>&2;
                exit 1;
            fi
            PREFIX_BASE="$(readlink -f $1)";
            NEED_SYSROOT_COPY=1;
            shift;
        else
            _N_ARGS=("${_N_ARGS[@]}" $1);
            shift;
        fi
    done
    _N_build "${_N_ARGS[@]}";
}
_N_main "$@"
exit $?;
